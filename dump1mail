#!/usr/bin/perl
use strict;
use warnings;
use YAML::Tiny qw( LoadFile DumpFile Dump );
use Mail::IMAPClient;
use Getopt::Long;
use File::HomeDir;
use File::Spec;
use Pod::Usage;
use DateTime;

# command-line options
my %option = (
    config => File::Spec->catfile( File::HomeDir->my_data, '.mail2tweetrc' ),
);
GetOptions( \%option, 'config=s', 'help', 'manual' )
    or pod2usage( -verbose => 1, -exit => 2 );

# simple on-line help
pod2usage( -verbose => 1 ) if $option{help};
pod2usage( -verbose => 2 ) if $option{manual};

# read config
my $config = LoadFile( $option{config} );

# start IMAP connection
my $imap = Mail::IMAPClient->new(
    Server   => $config->{imap}{server},
    Port     => $config->{imap}{port},
    User     => $config->{imap}{user},
    Password => $config->{imap}{password},
    Ssl      => $config->{imap}{ssl},
    Uid      => 1,
) or die "$@\n";

# select the folder in which to search
$imap->select( $config->{mail}{folder} )
    or die "Select '$config->{mail}{folder}' error: ", $imap->LastError, "\n";

# perform the search for interesting messages
my @search = (
    SINCE => $imap->Rfc3501_date( $config->{mail}{last} ||= 0 ),
    @{ $config->{mail}{search} },
);
my $msgs = $imap->search( @search )
    or die "Search '@{ $config->{mail}{search} }' error: ", $imap->LastError,
    "\n";

# nothing found
exit if !@$msgs;

# pick up the selected messages dates
my $date = $imap->fetch_hash( $msgs, "INTERNALDATE" );

# and format them in a sortable way
$_->{epoch} = epoch_Rfc3501( $_->{INTERNALDATE} ) for values %$date;

# pick up the oldest message
my ($oldest);
$date->{$_}{epoch} > $config->{mail}{last}
    and !$oldest || $date->{$_}{epoch} < $date->{$oldest}{epoch}
    and $oldest = $_
    for keys %$date;

# nothing recent
exit if !$oldest;

# and print it
print $imap->message_string( $oldest );

# save the updated configuration
$config->{mail}{last} = $date->{$oldest}{epoch};
DumpFile( $option{config}, $config );

# small helper function
BEGIN {
    my @date_month = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    my %month_by_name;
    @month_by_name{@date_month} = 1 .. @date_month;

    # should probably use DateTime::Format::RFC3501
    sub epoch_Rfc3501 {
        my ($internal) = @_;

        # 20-Sep-2010 14:25:53 +0200
        $internal =~ /^([ ]\d|\d{2})-([A-Z][a-z]{2})-(\d{4}) # date
           [ ](\d{2}):(\d{2}):(\d{2})                        # time
           [ ]([+-]\d{4})                                    # tz
        /x or die "Bad internal date: $internal";

        return DateTime->new(
            year      => 0 + $3,
            month     => $month_by_name{$2},
            day       => 0 + $1,
            hour      => 0 + $4,
            minute    => 0 + $5,
            second    => 0 + $6,
            time_zone => $7,
        )->epoch;
    }
}

__END__

=head1 NAME

dump1mail - Dump the oldest email matching some criteria from IMAP to STDIN

=head1 SYNOPSIS

    dump1mail

    # everything of notice happens in the config file:
    ---
    imap:
      password: S3kr3t
      port: 1234
      server: localhost
      uid: 1
      ssl: 1
      user: example.user
    mail:
      folder: INBOX
      last: 1314777803
      search:
        - HEADER
        - x-list
        - funny_link

=head1 DESCRIPTION

B<dump1mail> will connect (using SSL if the C<ssl> key is true) to the
IMAP server defined in the C<imap> key of the configuration file, open
the folder defined in the C<mail> section, run the optional C<search>
and print on stdout the oldest email that was received after the epoch
stored in the C<last> key.

If a matching email is found, after printing it the configuration file
is then rewritten to update the C<mail.last> key.

=head1 AUTHOR

Philippe Bruhat (BooK), C<< <book at cpan.org> >>

=head1 COPYRIGHT

Copyright 2011 Philippe Bruhat (BooK), all rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
