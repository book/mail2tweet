#!/usr/bin/perl
use strict;
use warnings;
use Encode qw( decode );
use Email::MIME;
use Net::Twitter;
use YAML::Tiny qw( LoadFile DumpFile Dump );
use Mail::IMAPClient;
use Getopt::Long;
use Regexp::Common;
use Scalar::Util 'blessed';
use List::Util 'min';
use File::Spec;
use Pod::Usage;
use DateTime;

# command-line options
GetOptions( \my %option, 'config=s', 'dry-run', 'verbose', 'help', 'manual' )
    or pod2usage( -verbose => 1, -exit => 2 );

# simple on-line help
pod2usage( -verbose => 1 ) if $option{help};
pod2usage( -verbose => 2 ) if $option{manual};

# read config
my $config = LoadFile( $option{config} );

# load list of already tweeted URL
my $seen_url;
$seen_url = LoadFile( $config->{seen_file} )
    if $config->{seen_file};

# TODO drop URL tweeted more than X days ago

### Step 1: get the messages

# start IMAP connection
my $imap = Mail::IMAPClient->new(
    Server   => $config->{imap}{server},
    Port     => $config->{imap}{port},
    User     => $config->{imap}{user},
    Password => $config->{imap}{password},
    Ssl      => $config->{imap}{ssl},
    Uid      => 1,
) or die "$@\n";

# select the folder in which to search
$imap->select( $config->{mail}{folder} )
    or die "Select '$config->{mail}{folder}' error: ", $imap->LastError, "\n";

# perform the search for interesting messages
my @search = (
    SINCE => $imap->Rfc3501_date( $config->{mail}{last} ||= 0 ),
    @{ $config->{mail}{search} },
);
my $msgs = $imap->search( @search )
    or die "Search '@{ $config->{mail}{search} }' error: ", $imap->LastError,
    "\n";

# nothing found
exit if !@$msgs;

# pick up the selected messages dates
my $date = $imap->fetch_hash( $msgs, "INTERNALDATE" );

# and format them in a sortable way
$_->{epoch} = epoch_Rfc3501( $_->{INTERNALDATE} ) for values %$date;

# sort messages by date
@$msgs =
  sort { $date->{$a}{epoch} <=> $date->{$b}{epoch} }
  grep $date->{$_}{epoch} > $config->{mail}{last}, keys %$date;

# nothing recent
exit if !@$msgs;

### Step 2: find and munge the email

# loop on the messages to find the first one to process
my ( $subject, @url );
for my $id (@$msgs) {

    # has this message been \Seen?
    my $seen = grep { /\\Seen/ } $imap->flags($id);

    # and save it
    my $email = $imap->message_string($id);
    $email = Email::MIME->new($email);

    # get the subject
    $subject = $email->header('subject');

    # get rid of uninteresting stuff
    my @remove = ( @{ $config->{cleanup}{subject} || [] }, '^\s*|\s*$' );
    $subject =~ s/$_// for @remove;

    # get the first URL
    for my $part ( $email->parts() ) {
        next if $part->content_type !~ m{text/plain};    # skip non text parts
        my $body = $part->body;
        $body =~ s/$_//mg for @{ $config->{cleanup}{body} || [] };
        my $sign;
        @url =
          map { /($RE{URI}{HTTP}{-scheme=>'https?'})/g }    # catch all HTTP URL
          grep !/^[>:]/,                                    # ignore quotes
          grep {
            /^-- ?$/ and $sign = 1;
            !$sign
          }                                                 # ignore signature
          split /[\n\r]+/, $body;                           # line by line
    }

    # leave it not \Seen if it wasn't
    $imap->unset_flag( "\\Seen", $id )
      or warn "Could not unset_flag: $@\n"
      if !$seen;

    # track date of last checked email
    $config->{mail}{last} = $date->{$id}{epoch};

    # remove already seen URL
    @url = grep !$seen_url->{$_}, @url;

    last if @url;                                   # this email can be tweeted!
    print "Skip: $subject\n" if $option{verbose};
}

goto DONE if !@url;    # nothing found in any of the emails

# add the hashtags
$subject =~ s{\b(@{[join '|', map quotemeta, @{$config->{twitter}{tags}}]})\b}
             {#$1}gi
    if @{ $config->{twitter}{tags} || [] };

### Step 3: Profit!^W^WSend the tweet

# create the message
my $message = "$subject - $url[0]";
my $error;

if ( $option{'dry-run'} ) {    # just checking
    print "Tweet: $message\n";
    exit 0;
}
else {                         # tweet it!
    my $twit = Net::Twitter->new(
        traits              => [qw/API::REST OAuth/],
        consumer_key        => $config->{twitter}{consumer_key},
        consumer_secret     => $config->{twitter}{consumer_secret},
        access_token        => $config->{twitter}{access_token},
        access_token_secret => $config->{twitter}{access_token_secret},
    );

    my $delay = $config->{twitter}{retry} ||= 30;
    while (1) {    # keep trying
        if ( my $result = eval { $twit->update($message); } ) {
            last;
        }
        else {
            my $err = $@;
            die $err unless blessed $err and $err->isa('Net::Twitter::Error');
            $error = sprintf '%s (%d %s)', $err->error, $err->code,
                $err->message;
            if ( $err->code !~ /^(?:403|2..)$/ )
            {   # network error (403 means refused by Twitter)
                $delay = min $delay, 1800;
                warn "$error - will retry in $delay seconds\n";
                sleep $delay;
                $delay *= 2;
            }

            # other error
            last;
        }
    }
}

DONE:

# save the updated configuration
DumpFile( $option{config}, $config ) if !$option{'dry-run'};

# there was an error
die "Error: $message\n$error\n" if $error;

$seen_url->{$url[0]} = $config->{mail}{last} if @url;
DumpFile( $config->{seen_file}, $seen_url )
  if !$option{'dry-run'} && $config->{seen_file};

print "Tweet: $message\n" if $message && $option{verbose};
exit 0;    # success

# small helper function
BEGIN {
    my @date_month = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    my %month_by_name;
    @month_by_name{@date_month} = 1 .. @date_month;

    # should probably use DateTime::Format::RFC3501
    sub epoch_Rfc3501 {
        my ($internal) = @_;

        # 20-Sep-2010 14:25:53 +0200
        $internal =~ /^([ ]\d|\d{2})-([A-Z][a-z]{2})-(\d{4}) # date
           [ ](\d{2}):(\d{2}):(\d{2})                        # time
           [ ]([+-]\d{4})                                    # tz
        /x or die "Bad internal date: $internal";

        return DateTime->new(
            year      => 0 + $3,
            month     => $month_by_name{$2},
            day       => 0 + $1,
            hour      => 0 + $4,
            minute    => 0 + $5,
            second    => 0 + $6,
            time_zone => $7,
        )->epoch;
    }
}

__END__

=head1 NAME

mail2tweet - tweets subject and first link from an email

=head1 SYNOPSIS

    mail2tweet

    # everything of notice happens in the config file:
    ---
    cleanup:
      subject:
        - '^(?:(?i:Fwd|Re): *)*'
      body:
        - 'http://www.example.com/'
    imap:
      password: S3kr3t
      port: 1234
      server: localhost
      uid: 1
      ssl: 1
      user: example.user
    mail:
      folder: INBOX
      last: 1314777803
      search:
        - HEADER
        - x-list
        - funny_link
    seen_file: seen_url.yml
    twitter:
      tags:
        - perl
        - twitter
      access_token: 371430037-BIy72xkX0DVYroro1MKhyhJDz18BN7C69Zoyt0rO
      access_token_secret: 1zP21Si6ZG5IX1gsCf2tHk7JqTixyu2b1gJ27eT764
      consumer_key: jhBlwVmoKxD6Tol5nrSKA
      consumer_secret: gim30k5hBgIBfIrWodRn7dy4iZV2H3P5BKqKGxZOo

=head1 DESCRIPTION

B<mail2tweet> will connect (using SSL if the C<ssl> key is true) to the
IMAP server defined in the C<imap> key of the configuration file, open
the folder defined in the C<mail> section, run the optional C<search>
and get the oldest email that was received after the epoch
stored in the C<last> key.

It will then generate a tweet based on the subject line and the first
URL found in the email.

The subject line can be "cleaned up" using the regular expressions
listed in the C<cleanup> configuration keys to remove matching text
from the I<subject> and I<body> of the email.

Only the messages parts with content-type C<text/plain> will be
scanned for URL. Quoted email text (lines starting with C<< > >>, C<:>)
will be ignored.

Keywords listed in the C<twitter.tags> configuration key will be
highlighted as hashtags (using the C<#> character).

URL are not shortened, since Twitter will automatically shorten long
URL using its C<t.co> service.

Already seen URL can be optionaly stored in a YAML file (C<seen_file>
configuration key). They will be ignored when looking for URL in an
email, thus allowing to look for a URL further in an email (typical
use case: email replies with a quoted URL).

If a matching email is found, after tweeting it the configuration file
is then rewritten to update the C<mail.last> key.

=head1 AUTHOR

Philippe Bruhat (BooK), C<< <book at cpan.org> >>

=head1 COPYRIGHT

Copyright 2011-2012 Philippe Bruhat (BooK), all rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
